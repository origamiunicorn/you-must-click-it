{"version":3,"sources":["components/pages/Click.js","App.js","serviceWorker.js","index.js"],"names":["jumboStyle","color","backgroundImage","backgroundPosition","backgroundSize","cardColOverride","columnCount","Click","state","message","alertState","score","topScore","Navbar","Brand","href","Toggle","Collapse","className","Text","ButtonGroup","aria-label","Button","variant","this","Jumbotron","fluid","style","Container","Alert","CardColumns","Card","Img","src","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"4WAUMA,EAAa,CACfC,MAAO,UACPC,gBAAiB,gJACjBC,mBAAoB,SACpBC,eAAgB,SAGdC,EAAkB,CACpBC,YAAa,GA8GFC,E,2MA7CXC,MAAQ,CACJC,QAAS,iCACTC,WAAY,YACZC,MAAO,EACPC,SAAU,G,wEAIV,OACI,oCACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAOC,MAAR,CAAcC,KAAK,KAAnB,aACA,kBAACF,EAAA,EAAOG,OAAR,MACA,kBAACH,EAAA,EAAOI,SAAR,CAAiBC,UAAU,uBACvB,kBAACL,EAAA,EAAOM,KAAR,KACI,kBAACC,EAAA,EAAD,CAAaC,aAAW,iBACpB,kBAACC,EAAA,EAAD,CAAQC,QAAQ,aAAhB,UAAoCC,KAAKhB,MAAMG,OAC/C,kBAACW,EAAA,EAAD,CAAQC,QAAQ,aAAhB,cAAwCC,KAAKhB,MAAMI,cAKnE,kBAACa,EAAA,EAAD,CAAWC,OAAK,EAACC,MAAO3B,GACpB,kBAAC4B,EAAA,EAAD,KACI,yCACA,+DAGR,kBAACA,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOX,UAAU,cAAcK,QAASC,KAAKhB,MAAME,YAC9Cc,KAAKhB,MAAMC,UAGpB,kBAACmB,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAaH,MAAOtB,GAChB,kBAAC0B,EAAA,EAAD,CAAMb,UAAU,OACZ,kBAACa,EAAA,EAAKC,IAAN,CAAUT,QAAQ,MAAMU,IAAI,+C,GAtCpCC,IAAMC,W,MCjEXC,MAXf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM5C,c","file":"static/js/main.24941d33.chunk.js","sourcesContent":["import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Container from 'react-bootstrap/Container';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Card from 'react-bootstrap/Card';\r\nimport CardColumns from 'react-bootstrap/CardColumns';\r\n\r\nconst jumboStyle = {\r\n    color: \"#ffffff\",\r\n    backgroundImage: 'url(\"https://images.unsplash.com/photo-1507103011901-e954d6ec0988?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80\")',\r\n    backgroundPosition: 'center',\r\n    backgroundSize: 'cover'\r\n}\r\n\r\nconst cardColOverride = {\r\n    columnCount: 4\r\n}\r\n\r\n// let imgArray = [\r\n//     {\r\n//         image: \"https://www.fillmurray.com/100/100\",\r\n//         alt: \"Bill Murray.\",\r\n//         clicked: false\r\n//     },\r\n//     {\r\n//         image: \"https://picsum.photos/seed/picsum/100/100\",\r\n//         alt: \"Seeded Image.\",\r\n//         clicked: false\r\n//     },\r\n//     {\r\n//         image: \"https://picsum.photos/100/100/?blur\",\r\n//         alt: \"Blurry Photo.\",\r\n//         clicked: false\r\n//     },\r\n//     {\r\n//         image: \"https://picsum.photos/100/100?grayscale\",\r\n//         alt: \"Grayscale.\",\r\n//         clicked: false\r\n//     }\r\n// ];\r\n\r\n// function shuffleImg(array) {\r\n//     let array2 = [];\r\n\r\n//     while (array.length !== 0) {\r\n//         let randomIndex = Math.floor(Math.random() * imgArray.length);\r\n//         array2.push(imgArray[randomIndex]);\r\n//         imgArray.splice(randomIndex, 1);\r\n//     }\r\n//     array = array2;\r\n//     return array;\r\n// };\r\n\r\n// console.log(imgArray);\r\n// console.log(shuffleImg(imgArray));\r\n\r\n\r\n// function shuffle(array) {\r\n//     for (let i = array.length - 1; i > 0; i--) {\r\n//         let j = Math.floor(Math.random() * (i + 1));\r\n//         [array[i], array[j]] = [array[j], array[i]];\r\n//     }\r\n//     return array;\r\n// }\r\n\r\n// function shuffleArray(array) {\r\n//     let i = array.length;\r\n//     while (i--) {\r\n//         const ri = Math.floor(Math.random() * (i + 1));\r\n//         [array[i], array[ri]] = [array[ri], array[i]];\r\n//     }\r\n//     return array;\r\n// }\r\n\r\n// console.log(imgArray);\r\n// console.log(shuffle(imgArray));\r\n// console.log(shuffleArray(imgArray));\r\n\r\nclass Click extends React.Component {\r\n\r\n    state = {\r\n        message: \"Select any cow image to begin!\",\r\n        alertState: \"secondary\",\r\n        score: 0,\r\n        topScore: 0\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Navbar>\r\n                    <Navbar.Brand href=\"/\">Moo-ve It</Navbar.Brand>\r\n                    <Navbar.Toggle />\r\n                    <Navbar.Collapse className=\"justify-content-end\">\r\n                        <Navbar.Text>\r\n                            <ButtonGroup aria-label=\"Basic example\">\r\n                                <Button variant=\"secondary\">Score: {this.state.score}</Button>\r\n                                <Button variant=\"secondary\">Top Score: {this.state.topScore}</Button>\r\n                            </ButtonGroup>\r\n                        </Navbar.Text>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n                <Jumbotron fluid style={jumboStyle}>\r\n                    <Container>\r\n                        <h1>Moo-ve It</h1>\r\n                        <p>Select each image once to win!</p>\r\n                    </Container>\r\n                </Jumbotron>\r\n                <Container>\r\n                    <Alert className=\"text-center\" variant={this.state.alertState}>\r\n                        {this.state.message}\r\n                    </Alert>\r\n                </Container>\r\n                <Container>\r\n                    <CardColumns style={cardColOverride}>\r\n                        <Card className=\"p-3\">\r\n                            <Card.Img variant=\"top\" src=\"https://www.fillmurray.com/100/100\" />\r\n                        </Card>\r\n                    </CardColumns>\r\n                </Container>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Click;\r\n","import React from 'react';\n// import { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Click from \"./components/pages/Click\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <Click />\n    // <Router>\n    //   <div>\n    //     <Route exact path=\"/\" component={Click} />\n    //   </div>\n    // </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}