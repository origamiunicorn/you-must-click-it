{"version":3,"sources":["assets/images/01.png","assets/images/02.png","assets/images/03.png","assets/images/04.png","assets/images/05.png","assets/images/06.png","assets/images/07.png","assets/images/08.png","assets/images/09.png","assets/images/10.png","assets/images/11.png","assets/images/12.png","assets/images/background.jpg","components/pages/Click.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","jumboStyle","color","backgroundImage","Background","backgroundPosition","backgroundSize","cardColOverride","columnCount","imgArray","image","Img01","alt","name","Img02","Img03","Img04","Img05","Img06","Img07","Img08","Img09","Img10","Img11","Img12","shuffleImages","array","foo","shuffledImg","i","length","push","shuffleFoo","arra1","temp","index","ctr","Math","floor","random","shuffleNum","valueOf","console","log","Click","state","images","clicked","currentClick","message","alertState","score","topScore","handleClick","event","preventDefault","newArray","target","setState","nameToSearch","arrayIs","filter","item","parseInt","highScore","currentScore","shuffleAll","newShuffle","this","Navbar","Brand","href","Toggle","Collapse","className","Text","ButtonGroup","aria-label","Button","variant","Jumbotron","fluid","style","Container","Alert","CardColumns","map","Card","Img","key","src","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.604a0df8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/01.14f1d993.png\";","module.exports = __webpack_public_path__ + \"static/media/02.cc9cfc9a.png\";","module.exports = __webpack_public_path__ + \"static/media/03.f4922786.png\";","module.exports = __webpack_public_path__ + \"static/media/04.cf7cb7a1.png\";","module.exports = __webpack_public_path__ + \"static/media/05.3db7b274.png\";","module.exports = __webpack_public_path__ + \"static/media/06.332ce66b.png\";","module.exports = __webpack_public_path__ + \"static/media/07.96681a28.png\";","module.exports = __webpack_public_path__ + \"static/media/08.00206022.png\";","module.exports = __webpack_public_path__ + \"static/media/09.86271912.png\";","module.exports = __webpack_public_path__ + \"static/media/10.e9dd10a2.png\";","module.exports = __webpack_public_path__ + \"static/media/11.f4a01a07.png\";","module.exports = __webpack_public_path__ + \"static/media/12.0d4ec343.png\";","module.exports = __webpack_public_path__ + \"static/media/background.c08528bb.jpg\";","import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Container from 'react-bootstrap/Container';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Card from 'react-bootstrap/Card';\r\nimport CardColumns from 'react-bootstrap/CardColumns';\r\nimport Img01 from '../../assets/images/01.png';\r\nimport Img02 from '../../assets/images/02.png';\r\nimport Img03 from '../../assets/images/03.png';\r\nimport Img04 from '../../assets/images/04.png';\r\nimport Img05 from '../../assets/images/05.png';\r\nimport Img06 from '../../assets/images/06.png';\r\nimport Img07 from '../../assets/images/07.png';\r\nimport Img08 from '../../assets/images/08.png';\r\nimport Img09 from '../../assets/images/09.png';\r\nimport Img10 from '../../assets/images/10.png';\r\nimport Img11 from '../../assets/images/11.png';\r\nimport Img12 from '../../assets/images/12.png';\r\nimport Background from '../../assets/images/background.jpg';\r\n\r\n\r\nconst jumboStyle = {\r\n    color: \"#ffffff\",\r\n    backgroundImage: `url(${Background})`,\r\n    backgroundPosition: 'center',\r\n    backgroundSize: 'cover'\r\n}\r\n\r\nconst cardColOverride = {\r\n    columnCount: 4\r\n}\r\n\r\nlet imgArray = [\r\n    {\r\n        image: Img01,\r\n        alt: \"Snowy mountains beyond a fall meadow with an elevated wooden path through it.\",\r\n        name: 1\r\n    },\r\n    {\r\n        image: Img02,\r\n        alt: \"Sheer rock mountain face rising above coniferous tree level.\",\r\n        name: 2\r\n    },\r\n    {\r\n        image: Img03,\r\n        alt: \"Looking out over a valley between sheer red rock cliffs with green along the valley river.\",\r\n        name: 3\r\n    },\r\n    {\r\n        image: Img04,\r\n        alt: \"Fog disguising sharp mountain peaks with rock faces and plants growing on steep inclines.\",\r\n        name: 4\r\n    },\r\n    {\r\n        image: Img05,\r\n        alt: \"Mountains rising above bright blue lake.\",\r\n        name: 5\r\n    },\r\n    {\r\n        image: Img06,\r\n        alt: \"Sunset over snowy mountain peaks.\",\r\n        name: 6\r\n    },\r\n    {\r\n        image: Img07,\r\n        alt: \"Snow covered mountains reflected in a lake.\",\r\n        name: 7\r\n    },\r\n    {\r\n        image: Img08,\r\n        alt: \"Sheer rock cliffs at a beach.\",\r\n        name: 8\r\n    },\r\n    {\r\n        image: Img09,\r\n        alt: \"Desert landscape with rock formations in the distance at sunset.\",\r\n        name: 9\r\n    },\r\n    {\r\n        image: Img10,\r\n        alt: \"Blunted mountains above a winding river with snowy peaks in the distance.\",\r\n        name: 10\r\n    },\r\n    {\r\n        image: Img11,\r\n        alt: \"Gently rising mountains covered in pathways with red and green flora.\",\r\n        name: 11\r\n    },\r\n    {\r\n        image: Img12,\r\n        alt: \"Looking down on Machu Picchu in the Andes on a sunny day.\",\r\n        name: 12\r\n    }\r\n];\r\n\r\nfunction shuffleNum(arra1) {\r\n    let ctr = arra1.length;\r\n    let temp;\r\n    let index;\r\n\r\n    // While there are elements in the array\r\n    while (ctr > 0) {\r\n        // Pick a random index\r\n        index = Math.floor(Math.random() * ctr);\r\n        // Decrease ctr by 1\r\n        ctr--;\r\n        // And swap the last element with it\r\n        temp = arra1[ctr];\r\n        arra1[ctr] = arra1[index];\r\n        arra1[index] = temp;\r\n    }\r\n    return arra1;\r\n};\r\n\r\nfunction shuffleImages(array) {\r\n    let foo = [];\r\n    let shuffledImg = [];\r\n\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        foo.push(i);\r\n    };\r\n\r\n    let shuffleFoo = shuffleNum(foo);\r\n\r\n    for (let i = 0; i <= (shuffleFoo.length - 1); i++) {\r\n        shuffledImg.push(array[foo[i].valueOf()]);\r\n    };\r\n    return shuffledImg;\r\n};\r\n\r\nconsole.log(shuffleImages(imgArray));\r\n\r\nclass Click extends React.Component {\r\n\r\n    state = {\r\n        images: [],\r\n        clicked: [],\r\n        currentClick: 0,\r\n        message: \"Select any image to begin!\",\r\n        alertState: \"secondary\",\r\n        score: 0,\r\n        topScore: 0\r\n    }\r\n\r\n    componentDidMount() {\r\n        let newShuffle = shuffleImages(imgArray);\r\n        this.setState({ images: newShuffle });\r\n    }\r\n\r\n    shuffleAll() {\r\n        let newShuffle = shuffleImages(imgArray);\r\n        this.setState({ images: newShuffle });\r\n    }\r\n\r\n    handleClick = event => {\r\n        event.preventDefault();\r\n        let newArray = this.state.clicked;\r\n        let name = event.target.name;\r\n        this.setState({\r\n            currentClick: event.target.name\r\n        });\r\n\r\n        function search(nameToSearch) {\r\n            return newArray.filter(item => {\r\n                return parseInt(item) === parseInt(nameToSearch);\r\n            })\r\n        };\r\n\r\n        const arrayIs = search(name);\r\n        const highScore = this.state.topScore;\r\n        const currentScore = this.state.score;\r\n        console.log(\"the current score and highest score\", currentScore, highScore);\r\n\r\n        if (arrayIs.length === 0) {\r\n            newArray.push(parseInt(name));\r\n\r\n            if (highScore <= currentScore && currentScore < 11) {\r\n                this.setState({\r\n                    clicked: newArray,\r\n                    message: \"Good work! Keep going!\",\r\n                    alertState: \"success\",\r\n                    score: this.state.score + 1,\r\n                    topScore: this.state.score + 1\r\n                })\r\n                this.shuffleAll();\r\n            } else if (highScore > currentScore && currentScore < 11) {\r\n                this.setState({\r\n                    clicked: newArray,\r\n                    message: \"Good work! Keep going!\",\r\n                    alertState: \"success\",\r\n                    score: this.state.score + 1\r\n                })\r\n                this.shuffleAll();\r\n            } else if (highScore === currentScore && currentScore === 11) {\r\n                this.setState({\r\n                    message: \"Congratulations! You've won!\",\r\n                    alertState: \"success\",\r\n                    score: this.state.score + 1,\r\n                    topScore: this.state.score + 1\r\n                })\r\n                this.shuffleAll();\r\n            } else if (highScore > currentScore && currentScore === 11) {\r\n                this.setState({\r\n                    message: \"Congratulations! You've won!\",\r\n                    alertState: \"success\",\r\n                    score: this.state.score + 1\r\n                })\r\n                this.shuffleAll();\r\n            } else {\r\n                this.setState({\r\n                    score: this.state.score + 1,\r\n                    topScore: this.state.score + 1\r\n                })\r\n            };\r\n        } else {\r\n            this.setState({\r\n                clicked: [],\r\n                message: \"Oops! You've already selected that image. Try again!\",\r\n                alertState: \"danger\",\r\n                score: 0\r\n            });\r\n            this.shuffleAll();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Navbar>\r\n                    <Navbar.Brand href=\"/you-must-click-it/\">Mountain Memory</Navbar.Brand>\r\n                    <Navbar.Toggle />\r\n                    <Navbar.Collapse className=\"justify-content-end\">\r\n                        <Navbar.Text>\r\n                            <ButtonGroup aria-label=\"Basic example\">\r\n                                <Button variant=\"secondary\" >Score: {this.state.score}</Button>\r\n                                <Button variant=\"warning\">Top Score: {this.state.topScore}</Button>\r\n                            </ButtonGroup>\r\n                        </Navbar.Text>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n                <Jumbotron fluid style={jumboStyle}>\r\n                    <Container>\r\n                        <h1>Mountain Memory</h1>\r\n                        <p>Select each image once to win!</p>\r\n                    </Container>\r\n                </Jumbotron>\r\n                <Container>\r\n                    <Alert className=\"text-center\" variant={this.state.alertState}>\r\n                        {this.state.message}\r\n                    </Alert>\r\n                </Container>\r\n                <Container>\r\n                    <CardColumns style={cardColOverride}>\r\n                        {this.state.images.map((image, index) => {\r\n                            return (\r\n                                <Card className=\"p-3\">\r\n                                    <Card.Img\r\n                                        key={index}\r\n                                        name={image.name}\r\n                                        variant=\"top\"\r\n                                        src={image.image}\r\n                                        alt={image.alt}\r\n                                        onClick={this.handleClick}\r\n                                    />\r\n                                </Card>\r\n                            )\r\n                        })};\r\n                    </CardColumns>\r\n                </Container>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Click;","import React from 'react';\nimport Click from \"./components/pages/Click\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <Click />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}